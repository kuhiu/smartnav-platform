// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_demosaic_0_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgUnzip_V_val_0_V_dout,
        imgUnzip_V_val_0_V_empty_n,
        imgUnzip_V_val_0_V_read,
        imgUnzip_V_val_1_V_dout,
        imgUnzip_V_val_1_V_empty_n,
        imgUnzip_V_val_1_V_read,
        imgUnzip_V_val_2_V_dout,
        imgUnzip_V_val_2_V_empty_n,
        imgUnzip_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        HwReg_height,
        HwReg_width
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] imgUnzip_V_val_0_V_dout;
input   imgUnzip_V_val_0_V_empty_n;
output   imgUnzip_V_val_0_V_read;
input  [7:0] imgUnzip_V_val_1_V_dout;
input   imgUnzip_V_val_1_V_empty_n;
output   imgUnzip_V_val_1_V_read;
input  [7:0] imgUnzip_V_val_2_V_dout;
input   imgUnzip_V_val_2_V_empty_n;
output   imgUnzip_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] HwReg_height;
input  [15:0] HwReg_width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgUnzip_V_val_0_V_read;
reg imgUnzip_V_val_1_V_read;
reg imgUnzip_V_val_2_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] m_axis_video_V_data_V_1_data_out;
reg    m_axis_video_V_data_V_1_vld_in;
wire    m_axis_video_V_data_V_1_vld_out;
wire    m_axis_video_V_data_V_1_ack_in;
wire    m_axis_video_V_data_V_1_ack_out;
reg   [23:0] m_axis_video_V_data_V_1_payload_A;
reg   [23:0] m_axis_video_V_data_V_1_payload_B;
reg    m_axis_video_V_data_V_1_sel_rd;
reg    m_axis_video_V_data_V_1_sel_wr;
wire    m_axis_video_V_data_V_1_sel;
wire    m_axis_video_V_data_V_1_load_A;
wire    m_axis_video_V_data_V_1_load_B;
reg   [1:0] m_axis_video_V_data_V_1_state;
wire    m_axis_video_V_data_V_1_state_cmp_full;
wire   [2:0] m_axis_video_V_keep_V_1_data_out;
reg    m_axis_video_V_keep_V_1_vld_in;
wire    m_axis_video_V_keep_V_1_vld_out;
wire    m_axis_video_V_keep_V_1_ack_out;
reg    m_axis_video_V_keep_V_1_sel_rd;
wire    m_axis_video_V_keep_V_1_sel;
reg   [1:0] m_axis_video_V_keep_V_1_state;
wire   [2:0] m_axis_video_V_strb_V_1_data_out;
reg    m_axis_video_V_strb_V_1_vld_in;
wire    m_axis_video_V_strb_V_1_vld_out;
wire    m_axis_video_V_strb_V_1_ack_out;
reg    m_axis_video_V_strb_V_1_sel_rd;
wire    m_axis_video_V_strb_V_1_sel;
reg   [1:0] m_axis_video_V_strb_V_1_state;
reg   [0:0] m_axis_video_V_user_V_1_data_out;
reg    m_axis_video_V_user_V_1_vld_in;
wire    m_axis_video_V_user_V_1_vld_out;
wire    m_axis_video_V_user_V_1_ack_in;
wire    m_axis_video_V_user_V_1_ack_out;
reg   [0:0] m_axis_video_V_user_V_1_payload_A;
reg   [0:0] m_axis_video_V_user_V_1_payload_B;
reg    m_axis_video_V_user_V_1_sel_rd;
reg    m_axis_video_V_user_V_1_sel_wr;
wire    m_axis_video_V_user_V_1_sel;
wire    m_axis_video_V_user_V_1_load_A;
wire    m_axis_video_V_user_V_1_load_B;
reg   [1:0] m_axis_video_V_user_V_1_state;
wire    m_axis_video_V_user_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_last_V_1_data_out;
reg    m_axis_video_V_last_V_1_vld_in;
wire    m_axis_video_V_last_V_1_vld_out;
wire    m_axis_video_V_last_V_1_ack_in;
wire    m_axis_video_V_last_V_1_ack_out;
reg   [0:0] m_axis_video_V_last_V_1_payload_A;
reg   [0:0] m_axis_video_V_last_V_1_payload_B;
reg    m_axis_video_V_last_V_1_sel_rd;
reg    m_axis_video_V_last_V_1_sel_wr;
wire    m_axis_video_V_last_V_1_sel;
wire    m_axis_video_V_last_V_1_load_A;
wire    m_axis_video_V_last_V_1_load_B;
reg   [1:0] m_axis_video_V_last_V_1_state;
wire    m_axis_video_V_last_V_1_state_cmp_full;
wire   [0:0] m_axis_video_V_id_V_1_data_out;
reg    m_axis_video_V_id_V_1_vld_in;
wire    m_axis_video_V_id_V_1_vld_out;
wire    m_axis_video_V_id_V_1_ack_out;
reg    m_axis_video_V_id_V_1_sel_rd;
wire    m_axis_video_V_id_V_1_sel;
reg   [1:0] m_axis_video_V_id_V_1_state;
wire   [0:0] m_axis_video_V_dest_V_1_data_out;
reg    m_axis_video_V_dest_V_1_vld_in;
wire    m_axis_video_V_dest_V_1_vld_out;
wire    m_axis_video_V_dest_V_1_ack_out;
reg    m_axis_video_V_dest_V_1_sel_rd;
wire    m_axis_video_V_dest_V_1_sel;
reg   [1:0] m_axis_video_V_dest_V_1_state;
reg    imgUnzip_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln213_reg_316;
reg    imgUnzip_V_val_1_V_blk_n;
reg    imgUnzip_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln213_reg_316_pp0_iter1_reg;
reg   [10:0] t_V_1_reg_188;
wire   [9:0] rows_V_fu_199_p1;
reg    ap_block_state1;
wire   [10:0] cols_V_fu_203_p1;
wire   [11:0] ret_V_fu_211_p2;
wire   [0:0] icmp_ln211_fu_222_p2;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [9:0] i_V_fu_227_p2;
reg   [9:0] i_V_reg_311;
wire   [0:0] icmp_ln213_fu_233_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    io_acc_block_signal_op35;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_V_fu_238_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_248_p2;
reg   [0:0] tmp_last_V_reg_325;
wire   [23:0] tmp_data_V_fu_269_p4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] t_V_reg_177;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_user_V_fu_122;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] zext_ln1354_fu_207_p1;
wire   [11:0] zext_ln879_fu_244_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 m_axis_video_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_data_V_1_state = 2'd0;
#0 m_axis_video_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_keep_V_1_state = 2'd0;
#0 m_axis_video_V_strb_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_strb_V_1_state = 2'd0;
#0 m_axis_video_V_user_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_user_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_user_V_1_state = 2'd0;
#0 m_axis_video_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_last_V_1_state = 2'd0;
#0 m_axis_video_V_id_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_id_V_1_state = 2'd0;
#0 m_axis_video_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_out == 1'b1) & (m_axis_video_V_data_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_rd <= ~m_axis_video_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_in == 1'b1) & (m_axis_video_V_data_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_wr <= ~m_axis_video_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)) & (m_axis_video_V_data_V_1_state == 2'd3)) | ((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) | ((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_out == 1'b1) & (m_axis_video_V_dest_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_rd <= ~m_axis_video_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)) & (m_axis_video_V_dest_V_1_state == 2'd3)) | ((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) | ((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_out == 1'b1) & (m_axis_video_V_id_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_rd <= ~m_axis_video_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)) & (m_axis_video_V_id_V_1_state == 2'd3)) | ((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) | ((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_ack_out == 1'b1) & (m_axis_video_V_keep_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_rd <= ~m_axis_video_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)) & (m_axis_video_V_keep_V_1_state == 2'd3)) | ((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_out == 1'b1) & (m_axis_video_V_last_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_rd <= ~m_axis_video_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_in == 1'b1) & (m_axis_video_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_wr <= ~m_axis_video_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)) & (m_axis_video_V_last_V_1_state == 2'd3)) | ((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) | ((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_out == 1'b1) & (m_axis_video_V_strb_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_rd <= ~m_axis_video_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)) & (m_axis_video_V_strb_V_1_state == 2'd3)) | ((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) | ((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_out == 1'b1) & (m_axis_video_V_user_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_rd <= ~m_axis_video_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_in == 1'b1) & (m_axis_video_V_user_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_wr <= ~m_axis_video_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)) & (m_axis_video_V_user_V_1_state == 2'd3)) | ((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) | ((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_188 <= 11'd0;
    end else if (((icmp_ln213_fu_233_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_1_reg_188 <= j_V_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_reg_177 <= i_V_reg_311;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_177 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_122 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_122 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_V_reg_311 <= i_V_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln213_reg_316 <= icmp_ln213_fu_233_p2;
        icmp_ln213_reg_316_pp0_iter1_reg <= icmp_ln213_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_A == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_A <= tmp_data_V_fu_269_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_B == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_B <= tmp_data_V_fu_269_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_A == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_A <= tmp_last_V_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_B == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_B <= tmp_last_V_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_A == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_A <= tmp_user_V_fu_122;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_B == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_B <= tmp_user_V_fu_122;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_fu_233_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_325 <= tmp_last_V_fu_248_p2;
    end
end

always @ (*) begin
    if ((icmp_ln213_fu_233_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgUnzip_V_val_0_V_blk_n = imgUnzip_V_val_0_V_empty_n;
    end else begin
        imgUnzip_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgUnzip_V_val_0_V_read = 1'b1;
    end else begin
        imgUnzip_V_val_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgUnzip_V_val_1_V_blk_n = imgUnzip_V_val_1_V_empty_n;
    end else begin
        imgUnzip_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgUnzip_V_val_1_V_read = 1'b1;
    end else begin
        imgUnzip_V_val_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgUnzip_V_val_2_V_blk_n = imgUnzip_V_val_2_V_empty_n;
    end else begin
        imgUnzip_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgUnzip_V_val_2_V_read = 1'b1;
    end else begin
        imgUnzip_V_val_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln213_reg_316_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((m_axis_video_V_data_V_1_sel == 1'b1)) begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B;
    end else begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_dest_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_id_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_last_V_1_sel == 1'b1)) begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B;
    end else begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_strb_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_user_V_1_sel == 1'b1)) begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B;
    end else begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln213_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_user_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln211_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln213_fu_233_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln213_fu_233_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln213_reg_316 == 1'd0) & (io_acc_block_signal_op35 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln213_reg_316 == 1'd0) & (io_acc_block_signal_op35 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln213_reg_316 == 1'd0) & (io_acc_block_signal_op35 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln213_reg_316 == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln213_reg_316 == 1'd0) & (io_acc_block_signal_op35 == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln213_reg_316_pp0_iter1_reg == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cols_V_fu_203_p1 = HwReg_width[10:0];

assign i_V_fu_227_p2 = (t_V_reg_177 + 10'd1);

assign icmp_ln211_fu_222_p2 = ((t_V_reg_177 == rows_V_fu_199_p1) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_233_p2 = ((t_V_1_reg_188 == cols_V_fu_203_p1) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op35 = (imgUnzip_V_val_2_V_empty_n & imgUnzip_V_val_1_V_empty_n & imgUnzip_V_val_0_V_empty_n);

assign j_V_fu_238_p2 = (t_V_1_reg_188 + 11'd1);

assign m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out;

assign m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out;

assign m_axis_video_TID = m_axis_video_V_id_V_1_data_out;

assign m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out;

assign m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out;

assign m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out;

assign m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out;

assign m_axis_video_TVALID = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state[1'd1];

assign m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full & ~m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_state_cmp_full & m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd;

assign m_axis_video_V_data_V_1_state_cmp_full = ((m_axis_video_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state[1'd0];

assign m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_dest_V_1_data_out = 1'd0;

assign m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd;

assign m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_id_V_1_data_out = 1'd0;

assign m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd;

assign m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state[1'd0];

assign m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_keep_V_1_data_out = 3'd7;

assign m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd;

assign m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state[1'd0];

assign m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state[1'd1];

assign m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full & ~m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_state_cmp_full & m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd;

assign m_axis_video_V_last_V_1_state_cmp_full = ((m_axis_video_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state[1'd0];

assign m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_strb_V_1_data_out = 3'd0;

assign m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd;

assign m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state[1'd0];

assign m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state[1'd1];

assign m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full & ~m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_state_cmp_full & m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd;

assign m_axis_video_V_user_V_1_state_cmp_full = ((m_axis_video_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state[1'd0];

assign ret_V_fu_211_p2 = ($signed(12'd4095) + $signed(zext_ln1354_fu_207_p1));

assign rows_V_fu_199_p1 = HwReg_height[9:0];

assign tmp_data_V_fu_269_p4 = {{{imgUnzip_V_val_2_V_dout}, {imgUnzip_V_val_1_V_dout}}, {imgUnzip_V_val_0_V_dout}};

assign tmp_last_V_fu_248_p2 = ((zext_ln879_fu_244_p1 == ret_V_fu_211_p2) ? 1'b1 : 1'b0);

assign zext_ln1354_fu_207_p1 = cols_V_fu_203_p1;

assign zext_ln879_fu_244_p1 = t_V_1_reg_188;

endmodule //design_1_v_demosaic_0_0_MultiPixStream2AXIvi
